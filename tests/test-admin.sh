#!/bin/bash

# Test script for AllHeaders Admin functionality
# Usage: ./test-admin.sh

set -e

URL="https://allheaders.com"
ADMIN_PASSWORD="${ADMIN_PASSWORD:-changeMe123!}"
FAILED=0

echo "üîß Tests de la fonctionnalit√© Admin AllHeaders"
echo "=============================================="

# Test 1: Admin login page accessible
echo "üìÑ Test page de login admin..."
LOGIN_PAGE=$(curl -s "$URL/control-panel")
if echo "$LOGIN_PAGE" | grep -q "Admin Access"; then
    echo "‚úÖ Page de login accessible"
else
    echo "‚ùå Page de login non accessible"
    ((FAILED++))
fi

# Test 2: Login with correct password
echo "üîê Test authentification admin..."
COOKIE_JAR=$(mktemp)
LOGIN_RESPONSE=$(curl -s -c "$COOKIE_JAR" -d "password=$ADMIN_PASSWORD" -X POST "$URL/control-panel/login" -w "%{http_code}")
if echo "$LOGIN_RESPONSE" | tail -c 4 | grep -q "302"; then
    echo "‚úÖ Authentification r√©ussie (redirect)"
else
    echo "‚ùå Authentification √©chou√©e (code: $(echo $LOGIN_RESPONSE | tail -c 4))"
    ((FAILED++))
fi

# Test 3: Access control panel with valid session
echo "üõ†Ô∏è  Test acc√®s panneau de contr√¥le..."
CONTROL_PANEL=$(curl -s -b "$COOKIE_JAR" "$URL/control-panel")
if echo "$CONTROL_PANEL" | grep -q "Control Panel"; then
    echo "‚úÖ Panneau de contr√¥le accessible avec session valide"
else
    echo "‚ùå Panneau de contr√¥le non accessible"
    ((FAILED++))
fi

# Test 4: Add a status rule via API
echo "üìù Test ajout r√®gle status via API..."
ADD_RULE_RESPONSE=$(curl -s -b "$COOKIE_JAR" -X POST "$URL/control-panel/api/rules" \
    -H "Content-Type: application/json" \
    -d '{"hostname":"test-status.example.com","type":"status","code":"410"}' \
    -w "%{http_code}")

if echo "$ADD_RULE_RESPONSE" | tail -c 4 | grep -q "200"; then
    echo "‚úÖ R√®gle de status ajout√©e avec succ√®s"
else
    echo "‚ùå √âchec ajout r√®gle status (code: $(echo $ADD_RULE_RESPONSE | tail -c 4))"
    ((FAILED++))
fi

# Test 5: Add a redirect rule via API
echo "üîÑ Test ajout r√®gle redirect via API..."
ADD_REDIRECT_RESPONSE=$(curl -s -b "$COOKIE_JAR" -X POST "$URL/control-panel/api/rules" \
    -H "Content-Type: application/json" \
    -d '{"hostname":"test-redirect.example.com","type":"redirect","code":"301","target":"https://new-site.com"}' \
    -w "%{http_code}")

if echo "$ADD_REDIRECT_RESPONSE" | tail -c 4 | grep -q "200"; then
    echo "‚úÖ R√®gle de redirection ajout√©e avec succ√®s"
else
    echo "‚ùå √âchec ajout r√®gle redirect (code: $(echo $ADD_REDIRECT_RESPONSE | tail -c 4))"
    ((FAILED++))
fi

# Test 6: Check if domain-rules.json was created
echo "üíæ Test cr√©ation fichier de r√®gles..."
if [ -f "/var/www/domain-rules.json" ]; then
    echo "‚úÖ Fichier domain-rules.json cr√©√©"
    echo "üìÑ Contenu du fichier:"
    cat /var/www/domain-rules.json
else
    echo "‚ùå Fichier domain-rules.json non cr√©√©"
    ((FAILED++))
fi

# Test 7: Test hostname rule enforcement (status)
echo "üéØ Test application r√®gle hostname (status)..."
STATUS_TEST=$(curl -s -H "Host: test-status.example.com" "$URL/any-path" -w "%{http_code}")
if echo "$STATUS_TEST" | tail -c 4 | grep -q "410"; then
    echo "‚úÖ R√®gle de status appliqu√©e correctement (410)"
else
    echo "‚ùå R√®gle de status non appliqu√©e (code: $(echo $STATUS_TEST | tail -c 4))"
    ((FAILED++))
fi

# Test 8: Test hostname rule enforcement (redirect)
echo "üîÄ Test application r√®gle hostname (redirect)..."
REDIRECT_TEST=$(curl -s -H "Host: test-redirect.example.com" "$URL/any-path" -w "%{http_code}")
if echo "$REDIRECT_TEST" | tail -c 4 | grep -q "301"; then
    echo "‚úÖ R√®gle de redirection appliqu√©e correctement (301)"
else
    echo "‚ùå R√®gle de redirection non appliqu√©e (code: $(echo $REDIRECT_TEST | tail -c 4))"
    ((FAILED++))
fi

# Test 9: Delete a rule via API
echo "üóëÔ∏è  Test suppression r√®gle via API..."
DELETE_RESPONSE=$(curl -s -b "$COOKIE_JAR" -X DELETE "$URL/control-panel/api/rules/test-status.example.com" -w "%{http_code}")
if echo "$DELETE_RESPONSE" | tail -c 4 | grep -q "200"; then
    echo "‚úÖ R√®gle supprim√©e avec succ√®s"
else
    echo "‚ùå √âchec suppression r√®gle (code: $(echo $DELETE_RESPONSE | tail -c 4))"
    ((FAILED++))
fi

# Test 10: Logout functionality
echo "üö™ Test d√©connexion..."
LOGOUT_RESPONSE=$(curl -s -b "$COOKIE_JAR" "$URL/control-panel/logout" -w "%{http_code}")
if echo "$LOGOUT_RESPONSE" | tail -c 4 | grep -q "302"; then
    echo "‚úÖ D√©connexion r√©ussie"
else
    echo "‚ùå √âchec d√©connexion (code: $(echo $LOGOUT_RESPONSE | tail -c 4))"
    ((FAILED++))
fi

# Test 11: Access control panel after logout (should fail)
echo "üîí Test acc√®s apr√®s d√©connexion..."
PROTECTED_ACCESS=$(curl -s -b "$COOKIE_JAR" "$URL/control-panel")
if echo "$PROTECTED_ACCESS" | grep -q "Admin Access"; then
    echo "‚úÖ Acc√®s prot√©g√© apr√®s d√©connexion (retour au login)"
else
    echo "‚ùå Acc√®s non prot√©g√© apr√®s d√©connexion"
    ((FAILED++))
fi

# Cleanup
rm -f "$COOKIE_JAR"

echo "=============================================="
if [ $FAILED -eq 0 ]; then
    echo "üéâ Tous les tests admin sont pass√©s !"
    echo "üõ†Ô∏è  Fonctionnalit√© d'administration op√©rationnelle !"
else
    echo "üí• $FAILED test(s) admin √©chou√©(s)"
fi

echo ""
echo "üìã R√©sum√© des fonctionnalit√©s test√©es:"
echo "  ‚úì Authentification par mot de passe"
echo "  ‚úì Gestion de session s√©curis√©e"
echo "  ‚úì Interface de contr√¥le web"
echo "  ‚úì API REST pour gestion des r√®gles"
echo "  ‚úì R√®gles de status par hostname"
echo "  ‚úì R√®gles de redirection par hostname"
echo "  ‚úì Stockage persistant des r√®gles (JSON)"
echo "  ‚úì Protection des routes admin"
echo ""
echo "üîß Acc√®s admin: https://allheaders.com/control-panel"
echo "üîë Mot de passe: $ADMIN_PASSWORD"

exit $FAILED